{"ast":null,"code":"var _jsxFileName = \"/home/mashi/Moringa/phase-2/phase-2-code-challenge/src/components/BotCollection.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport BotCard from './BotCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotCollection = ({\n  bots,\n  onAddToArmy,\n  army\n}) => {\n  _s();\n  const [sortCriteria, setSortCriteria] = useState('name');\n  const [enlistedBots, setEnlistedBots] = useState([]);\n  useEffect(() => {\n    const enlistedBotIds = army.map(bot => bot.id);\n    setEnlistedBots(bots.filter(bot => enlistedBotIds.includes(bot.id)));\n  }, [army, bots]);\n  const handleSort = criteria => {\n    setSortCriteria(criteria);\n  };\n  const sortedBots = bots.sort((a, b) => {\n    switch (sortCriteria) {\n      case 'health':\n        return b.health - a.health;\n      case 'damage':\n        return b.damage - a.damage;\n      case 'armor':\n        return b.armor - a.armor;\n      case 'name':\n        return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;\n      default:\n        return 0;\n    }\n  });\n  const isBotEnlisted = bot => {\n    return army.some(enlistedBot => enlistedBot.id === bot.id);\n  };\n  const handleClick = bot => {\n    if (!isBotEnlisted(bot)) {\n      fetch('http://localhost:8000/bots', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(bot)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to enlist bot');\n        }\n        return response.json();\n      }).then(data => {\n        setEnlistedBots(prevEnlistedBots => [...prevEnlistedBots, bot]);\n        onAddToArmy(bot);\n      }).catch(error => {\n        console.error('Error enlisting bot:', error);\n        alert('Failed to enlist bot. Please try again.');\n      });\n    } else {\n      alert('Bot is already enlisted.');\n    }\n  };\n  const filteredBots = sortedBots.filter(bot => !isBotEnlisted(bot));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sort-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Sort by: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort('name'),\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort('health'),\n        children: \"Health\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort('damage'),\n        children: \"Damage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSort('armor'),\n        children: \"Armor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"botcollection\",\n      children: filteredBots.map(bot => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/bots/${bot.id}`,\n          children: /*#__PURE__*/_jsxDEV(BotCard, {\n            bot: bot,\n            onEnlist: handleClick,\n            isEnlisted: isBotEnlisted(bot)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, bot.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(BotCollection, \"NNE1ovrJf/W9d9QqVSn4bOT5W3c=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useState","useEffect","Link","BotCard","jsxDEV","_jsxDEV","BotCollection","bots","onAddToArmy","army","_s","sortCriteria","setSortCriteria","enlistedBots","setEnlistedBots","enlistedBotIds","map","bot","id","filter","includes","handleSort","criteria","sortedBots","sort","a","b","health","damage","armor","name","toLowerCase","isBotEnlisted","some","enlistedBot","handleClick","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","prevEnlistedBots","catch","error","console","alert","filteredBots","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","to","onEnlist","isEnlisted","_c","$RefreshReg$"],"sources":["/home/mashi/Moringa/phase-2/phase-2-code-challenge/src/components/BotCollection.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport BotCard from './BotCard';\n\nconst BotCollection = ({ bots, onAddToArmy, army }) => {\n  const [sortCriteria, setSortCriteria] = useState('name');\n  const [enlistedBots, setEnlistedBots] = useState([]);\n\n  useEffect(() => {\n    const enlistedBotIds = army.map(bot => bot.id);\n    setEnlistedBots(bots.filter(bot => enlistedBotIds.includes(bot.id)));\n  }, [army, bots]);\n\n  const handleSort = criteria => {\n    setSortCriteria(criteria);\n  };\n\n  const sortedBots = bots.sort((a, b) => {\n    switch (sortCriteria) {\n      case 'health':\n        return b.health - a.health;\n      case 'damage':\n        return b.damage - a.damage;\n      case 'armor':\n        return b.armor - a.armor;\n      case 'name':\n        return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;\n      default:\n        return 0;\n    }\n  });\n\n  const isBotEnlisted = (bot) => {\n    return army.some((enlistedBot) => enlistedBot.id === bot.id);\n  };\n\n  const handleClick = (bot) => {\n    if (!isBotEnlisted(bot)) {\n      fetch('http://localhost:8000/bots', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(bot),\n      })\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to enlist bot');\n          }\n          return response.json();\n        })\n        .then(data => {\n          setEnlistedBots(prevEnlistedBots => [...prevEnlistedBots, bot]);\n          onAddToArmy(bot);\n        })\n        .catch(error => {\n          console.error('Error enlisting bot:', error);\n          alert('Failed to enlist bot. Please try again.');\n        });\n    } else {\n      alert('Bot is already enlisted.');\n    }\n  }\n\n  const filteredBots = sortedBots.filter((bot) => !isBotEnlisted(bot));\n\n  return (\n    <div>\n      <div className='sort-bar'>\n        <span>Sort by: </span>\n        <button onClick={() => handleSort('name')}>Name</button>\n        <button onClick={() => handleSort('health')}>Health</button>\n        <button onClick={() => handleSort('damage')}>Damage</button>\n        <button onClick={() => handleSort('armor')}>Armor</button>\n      </div>\n      <div className='botcollection'>\n        {filteredBots.map(bot => (\n          <div key={bot.id}>\n            <Link to={`/bots/${bot.id}`}>\n              <BotCard bot={bot} onEnlist={handleClick} isEnlisted={isBotEnlisted(bot)} />\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BotCollection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}